from aiogram import Router, F
from aiogram.types import Message
import requests
from config import OUTLINE_API_URL  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

router = Router()


@router.message(F.text == "/key")
async def generate_outline_key(message: Message):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π Outline –∫–ª—é—á —á–µ—Ä–µ–∑ Outline Admin API
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
    url = f"{OUTLINE_API_URL}/access-keys"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Outline API
    headers = {
        "Content-Type": "application/json"
    }

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    data = {
        "name": f"telegram_{message.from_user.id}_{message.date.strftime('%Y%m%d_%H%M%S')}"
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Outline API
        response = requests.post(url, headers=headers, json=data, verify=False)
        response.raise_for_status()

        key_data = response.json()
        key_url = key_data.get("accessUrl") + "#KT_VPN"

        if key_url:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            response_text = f"""
üîë **–í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:**

`{key_url}`

üìã **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –°–∫–∞—á–∞–π—Ç–µ Outline Client
2. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
3. –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É
4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å

üí° **–ö–ª—é—á —Å–æ–∑–¥–∞–Ω –¥–ª—è:** @{message.from_user.username or message.from_user.id}
            """
            await message.answer(response_text, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.")

    except requests.exceptions.ConnectionError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outline —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API URL.")
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 401:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API URL.")
        else:
            await message.answer(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
    except requests.exceptions.RequestException as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")