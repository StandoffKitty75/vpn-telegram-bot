# handlers/circle.py

import os
import tempfile
import subprocess
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.utils.chat_action import ChatActionSender

router = Router()

user_circle_mode = set()


@router.message(Command("circle"))
async def cmd_circle(message: Message):
    user_circle_mode.add(message.from_user.id)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –∫—Ä—É–∂–æ—á–µ–∫ üé•")


@router.message(F.video)
async def handle_video(message: Message):
    user_id = message.from_user.id

    if user_id not in user_circle_mode:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /circle.")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤
    with tempfile.TemporaryDirectory() as tmp_dir:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram
            file = await message.bot.get_file(message.video.file_id)
            input_path = os.path.join(tmp_dir, "input.mp4")

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
            await message.bot.download_file(file.file_path, destination=input_path)

            output_path = os.path.join(tmp_dir, "output.mp4")

            # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            ffmpeg_cmd = [
                "ffmpeg",
                "-i", input_path,
                "-vf", "scale=640:640:force_original_aspect_ratio=decrease,pad=640:640:(ow-iw)/2:(oh-ih)/2,format=yuv420p",
                "-c:v", "libx264",
                "-profile:v", "baseline",
                "-level", "3.0",
                #"-an",  # –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ
                "-movflags", "+faststart",
                output_path
            ]

            process = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)

            if process.returncode != 0:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ ffmpeg:\n{process.stderr}"
                await message.answer(error_msg)
                user_circle_mode.discard(user_id)
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Ç-—ç–∫—à–µ–Ω "–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä—É–∂–∫–∞"
            async with ChatActionSender.upload_video_note(chat_id=message.chat.id, bot=message.bot):
                video_note_file = FSInputFile(output_path)
                await message.bot.send_video_note(
                    chat_id=message.chat.id,
                    video_note=video_note_file,
                    length=360
                )

            print(f"Video note sent for user {user_id}")

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        finally:
            user_circle_mode.discard(user_id)


@router.message(F.video_note)
async def handle_video_note(message: Message):
    await message.answer("–≠—Ç–æ —É–∂–µ –∫—Ä—É–∂–æ—á–µ–∫ üòâ –ü—Ä–∏—à–ª–∏ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /circle.")