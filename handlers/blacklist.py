from aiogram import Router, F
from aiogram.types import Message
import json, os
from config import ADMIN_ID

router = Router()
BLACKLIST_FILE = "data/blacklist.json"

def load_blacklist():
    if not os.path.exists(BLACKLIST_FILE):
        return []
    with open(BLACKLIST_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

def save_blacklist(data):
    os.makedirs(os.path.dirname(BLACKLIST_FILE), exist_ok=True)
    with open(BLACKLIST_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@router.message(F.text.startswith("/addblock"))
async def addblock(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏ Telegram ID: /addblock <telegram_id>")
        return

    try:
        user_id = int(parts[1])
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    blacklist = load_blacklist()
    if user_id in blacklist:
        await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        return

    blacklist.append(user_id)
    save_blacklist(blacklist)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.", parse_mode="Markdown")

@router.message(F.text.startswith("/unblock"))
async def unblock(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏ Telegram ID: /unblock <telegram_id>")
        return

    try:
        user_id = int(parts[1])
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    blacklist = load_blacklist()
    if user_id not in blacklist:
        await message.reply("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        return

    blacklist.remove(user_id)
    save_blacklist(blacklist)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", parse_mode="Markdown")

@router.message(F.text == "/start")
async def start_command(message: Message):
    user_id = message.from_user.id
    blacklist = load_blacklist()
    if user_id in blacklist:
        await message.reply("üö´ –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.")